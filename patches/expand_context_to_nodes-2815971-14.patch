diff --git a/src/Context/GroupRouteContext.php b/src/Context/GroupRouteContext.php
index dea1e37..57b77c2 100644
--- a/src/Context/GroupRouteContext.php
+++ b/src/Context/GroupRouteContext.php
@@ -39,7 +39,7 @@ class GroupRouteContext implements ContextProviderInterface {
     $cacheability->setCacheContexts(['route']);
 
     // Create a context from the definition and retrieved or created group.
-    $context = new Context($context_definition, $this->getGroupFromRoute());
+    $context = new Context($context_definition, $this->getBestCandidate());
     $context->addCacheableDependency($cacheability);
 
     return ['group' => $context];
diff --git a/src/Context/GroupRouteContextTrait.php b/src/Context/GroupRouteContextTrait.php
index 53a6ac9..b209559 100644
--- a/src/Context/GroupRouteContextTrait.php
+++ b/src/Context/GroupRouteContextTrait.php
@@ -3,7 +3,9 @@
 namespace Drupal\group\Context;
 
 use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupContent;
 use Drupal\group\Entity\GroupInterface;
+use Drupal\node\Entity\Node;
 
 /**
  * Trait to get the group entity from the current route.
@@ -62,4 +64,31 @@ trait GroupRouteContextTrait {
     return NULL;
   }
 
+  /**
+   * Retrieves the group entity from the current route.
+   *
+   * Expands $this->getGroupFromRoute() to also return a Group based if
+   * interacting with Group Content such as nodes assigned to a Group.
+   *
+   * @return \Drupal\group\Entity\GroupInterface|null
+   *   A group entity if one could be found or created, NULL otherwise.
+   */
+  public function getBestCandidate() {
+    if ($group = $this->getGroupFromRoute()) {
+      return $group;
+    }
+    elseif ($node = \Drupal::request()->attributes->get('node')) {
+      if (is_numeric($node)) {
+        $node = Node::load($node);
+      }
+      $group_content_array = GroupContent::loadByEntity($node);
+      foreach ($group_content_array as $group_content) {
+        $group = $group_content->getGroup();
+      }
+      return $group;
+    }
+
+    return NULL;
+  }
+
 }
